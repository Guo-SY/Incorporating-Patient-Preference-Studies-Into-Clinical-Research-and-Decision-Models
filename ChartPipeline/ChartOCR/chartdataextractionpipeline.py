# -*- coding: utf-8 -*-
"""ChartDataExtractionPipeline.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1scOu27ttmYWv9lD-_asJ1nRUexPNRa3K

###**CHART** **PIPELINE**

Montaggio del drive
"""

from google.colab import drive
drive.mount('/content/drive')

"""Installazione"""

!pip install numpy
!pip install torch
!pip install cython
!pip install opencv-python
!pip install h5py
!pip install pytesseract
!apt install tesseract-ocr
!apt install libtesseract-dev
!pip install pycocotools
!pip install easyocr

"""Import"""

import matplotlib.pyplot as plt
from PIL import Image
import torch
import cv2
from google.colab.patches import cv2_imshow
import pytesseract
import pandas as pd
import os
import re
import numpy as np
import pickle
import shutil

"""Inizializzazioni delle variabili"""

figCap_path="/content/drive/MyDrive/ADSP_Project/Code/ChartPipeline/PDFigCapX/code/FigCap.py"
input_file_path="/content/drive/MyDrive/ADSP_Project/Code/ChartPipeline/input_file"
output_file_path="/content/drive/MyDrive/ADSP_Project/Code/ChartPipeline/output_file/"
inputChartOCR_path="/content/drive/MyDrive/ADSP_Project/Code/ChartPipeline/inputChartOCR"
outputChartOCR_path="/content/drive/MyDrive/ADSP_Project/Code/ChartPipeline/outputChartOCR"
output_final_path="/content/drive/MyDrive/ADSP_Project/Code/ChartPipeline/output_final"

"""Definizione delle funzioni"""

def load_object_from_file(file_path):
    with open(file_path, 'rb') as file:
        return pickle.load(file)

"""Run di CapFigX"""

!python {figCap_path} \
--input_path {input_file_path} \
--output_path {output_file_path}

"""Copia output CapFigX nell'input di chartOcr"""

import os
estensioni_immagini=['.jpg']
if os.path.exists(output_file_path):
        lista_elementi = os.listdir(output_file_path)
        cartelle = [elemento for elemento in lista_elementi if os.path.isdir(os.path.join(output_file_path, elemento))    ]
else:
        print("La cartella {} non esiste.".format(output_file_path))
        #exit(1)
cartelle= [c for c in cartelle if c!="xpdf"]
dizionario_pdf_img=dict()
for c in cartelle :
  lista_immagini = [nome for nome in os.listdir(os.path.join(output_file_path,c)) if os.path.splitext(nome)[1].lower() in estensioni_immagini ]
  if len(lista_immagini)>0:
    dizionario_pdf_img[c]=lista_immagini

for d in dizionario_pdf_img.keys():
  percorso_cartella_pdf=os.path.join(inputChartOCR_path,d)
  os.makedirs(percorso_cartella_pdf, exist_ok=True)
  for im in dizionario_pdf_img[d]:
    shutil.copy(  os.path.join(output_file_path,d,im)  , percorso_cartella_pdf)

"""Run di ChartOCR"""

os.chdir("/content/drive/MyDrive/ASDP Chart Extraction/DeepRule/models/py_utils/_cpools")
!python setup.py build_ext --inplace

os.chdir("/content/drive/MyDrive/ASDP Chart Extraction/DeepRule/external")
!make

os.chdir("/content/drive/MyDrive/ASDP Chart Extraction/DeepRule")

!python "test_pipeline_new.py" --image_dir {inputChartOCR_path} --output_dir {outputChartOCR_path}

"""Salvataggio sottoforma di file excel dell'output di chartOCR"""

diz_df = dict()

if os.path.exists(outputChartOCR_path):
    lista_nomi_pdf = os.listdir(outputChartOCR_path)
    for nome_pdf in lista_nomi_pdf:
      diz_df[nome_pdf] =[]
      lista_nomi_img=os.listdir(os.path.join(outputChartOCR_path,nome_pdf))
      for nome_img in lista_nomi_img:
        if os.path.exists(os.path.join(outputChartOCR_path,nome_pdf,nome_img,"result.jpg")):
          labelled_img = os.path.join(outputChartOCR_path,nome_pdf,nome_img,"result.jpg")
          print("SI RESULT")

        if os.path.exists(os.path.join(outputChartOCR_path,nome_pdf,nome_img,"chart_object.pkl")):
          pkl_chart = os.path.join(outputChartOCR_path,nome_pdf,nome_img,"chart_object.pkl")
          chart = load_object_from_file(pkl_chart)
          print("SI PKL")
          #creiamo dizionaro di df cosi li salvo su excel dopo
          diz_df[nome_pdf].append(chart.df_table)

        else:
          print("NO PKL")


for k in diz_df.keys():
  cartella_pdf=os.path.join(output_final_path,k)
  if not os.path.exists(cartella_pdf):
        os.makedirs(cartella_pdf)

  for i,df in enumerate(diz_df[k]):
    if df is not None:
      df.to_excel(os.path.join(cartella_pdf,"dataframes.xlsx"), sheet_name=f'img_{i+1}')

